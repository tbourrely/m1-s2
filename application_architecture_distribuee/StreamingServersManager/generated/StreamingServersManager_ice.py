# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `StreamingServersManager.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module StreamingServerManager
_M_StreamingServerManager = Ice.openModule('StreamingServerManager')
__name__ = 'StreamingServerManager'

if 'Server' not in _M_StreamingServerManager.__dict__:
    _M_StreamingServerManager.Server = Ice.createTempClass()
    class Server(Ice.Value):
        def __init__(self, id='', ip=''):
            self.id = id
            self.ip = ip

        def ice_id(self):
            return '::StreamingServerManager::Server'

        @staticmethod
        def ice_staticId():
            return '::StreamingServerManager::Server'

        def __str__(self):
            return IcePy.stringify(self, _M_StreamingServerManager._t_Server)

        __repr__ = __str__

    _M_StreamingServerManager._t_Server = IcePy.defineValue('::StreamingServerManager::Server', Server, -1, (), False, False, None, (
        ('id', (), IcePy._t_string, False, 0),
        ('ip', (), IcePy._t_string, False, 0)
    ))
    Server._ice_type = _M_StreamingServerManager._t_Server

    _M_StreamingServerManager.Server = Server
    del Server

if '_t_serverSequence' not in _M_StreamingServerManager.__dict__:
    _M_StreamingServerManager._t_serverSequence = IcePy.defineSequence('::StreamingServerManager::serverSequence', (), _M_StreamingServerManager._t_Server)

if 'Track' not in _M_StreamingServerManager.__dict__:
    _M_StreamingServerManager.Track = Ice.createTempClass()
    class Track(Ice.Value):
        def __init__(self, id='', title='', artist='', album='', path='', servers=None):
            self.id = id
            self.title = title
            self.artist = artist
            self.album = album
            self.path = path
            self.servers = servers

        def ice_id(self):
            return '::StreamingServerManager::Track'

        @staticmethod
        def ice_staticId():
            return '::StreamingServerManager::Track'

        def __str__(self):
            return IcePy.stringify(self, _M_StreamingServerManager._t_Track)

        __repr__ = __str__

    _M_StreamingServerManager._t_Track = IcePy.declareValue('::StreamingServerManager::Track')

    _M_StreamingServerManager._t_Track = IcePy.defineValue('::StreamingServerManager::Track', Track, -1, (), False, False, None, (
        ('id', (), IcePy._t_string, False, 0),
        ('title', (), IcePy._t_string, False, 0),
        ('artist', (), IcePy._t_string, False, 0),
        ('album', (), IcePy._t_string, False, 0),
        ('path', (), IcePy._t_string, False, 0),
        ('servers', (), _M_StreamingServerManager._t_serverSequence, False, 0)
    ))
    Track._ice_type = _M_StreamingServerManager._t_Track

    _M_StreamingServerManager.Track = Track
    del Track

if '_t_trackSequence' not in _M_StreamingServerManager.__dict__:
    _M_StreamingServerManager._t_trackSequence = IcePy.defineSequence('::StreamingServerManager::trackSequence', (), _M_StreamingServerManager._t_Track)

if 'Status' not in _M_StreamingServerManager.__dict__:
    _M_StreamingServerManager.Status = Ice.createTempClass()
    class Status(Ice.Value):
        def __init__(self, code=0, message=''):
            self.code = code
            self.message = message

        def ice_id(self):
            return '::StreamingServerManager::Status'

        @staticmethod
        def ice_staticId():
            return '::StreamingServerManager::Status'

        def __str__(self):
            return IcePy.stringify(self, _M_StreamingServerManager._t_Status)

        __repr__ = __str__

    _M_StreamingServerManager._t_Status = IcePy.defineValue('::StreamingServerManager::Status', Status, -1, (), False, False, None, (
        ('code', (), IcePy._t_int, False, 0),
        ('message', (), IcePy._t_string, False, 0)
    ))
    Status._ice_type = _M_StreamingServerManager._t_Status

    _M_StreamingServerManager.Status = Status
    del Status

_M_StreamingServerManager._t_Manager = IcePy.defineValue('::StreamingServerManager::Manager', Ice.Value, -1, (), False, True, None, ())

if 'ManagerPrx' not in _M_StreamingServerManager.__dict__:
    _M_StreamingServerManager.ManagerPrx = Ice.createTempClass()
    class ManagerPrx(Ice.ObjectPrx):

        def search(self, key, value, context=None):
            return _M_StreamingServerManager.Manager._op_search.invoke(self, ((key, value), context))

        def searchAsync(self, key, value, context=None):
            return _M_StreamingServerManager.Manager._op_search.invokeAsync(self, ((key, value), context))

        def begin_search(self, key, value, _response=None, _ex=None, _sent=None, context=None):
            return _M_StreamingServerManager.Manager._op_search.begin(self, ((key, value), _response, _ex, _sent, context))

        def end_search(self, _r):
            return _M_StreamingServerManager.Manager._op_search.end(self, _r)

        def list(self, context=None):
            return _M_StreamingServerManager.Manager._op_list.invoke(self, ((), context))

        def listAsync(self, context=None):
            return _M_StreamingServerManager.Manager._op_list.invokeAsync(self, ((), context))

        def begin_list(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_StreamingServerManager.Manager._op_list.begin(self, ((), _response, _ex, _sent, context))

        def end_list(self, _r):
            return _M_StreamingServerManager.Manager._op_list.end(self, _r)

        def play(self, track, context=None):
            return _M_StreamingServerManager.Manager._op_play.invoke(self, ((track, ), context))

        def playAsync(self, track, context=None):
            return _M_StreamingServerManager.Manager._op_play.invokeAsync(self, ((track, ), context))

        def begin_play(self, track, _response=None, _ex=None, _sent=None, context=None):
            return _M_StreamingServerManager.Manager._op_play.begin(self, ((track, ), _response, _ex, _sent, context))

        def end_play(self, _r):
            return _M_StreamingServerManager.Manager._op_play.end(self, _r)

        def add(self, trackList, context=None):
            return _M_StreamingServerManager.Manager._op_add.invoke(self, ((trackList, ), context))

        def addAsync(self, trackList, context=None):
            return _M_StreamingServerManager.Manager._op_add.invokeAsync(self, ((trackList, ), context))

        def begin_add(self, trackList, _response=None, _ex=None, _sent=None, context=None):
            return _M_StreamingServerManager.Manager._op_add.begin(self, ((trackList, ), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_StreamingServerManager.Manager._op_add.end(self, _r)

        def remove(self, trackList, context=None):
            return _M_StreamingServerManager.Manager._op_remove.invoke(self, ((trackList, ), context))

        def removeAsync(self, trackList, context=None):
            return _M_StreamingServerManager.Manager._op_remove.invokeAsync(self, ((trackList, ), context))

        def begin_remove(self, trackList, _response=None, _ex=None, _sent=None, context=None):
            return _M_StreamingServerManager.Manager._op_remove.begin(self, ((trackList, ), _response, _ex, _sent, context))

        def end_remove(self, _r):
            return _M_StreamingServerManager.Manager._op_remove.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_StreamingServerManager.ManagerPrx.ice_checkedCast(proxy, '::StreamingServerManager::Manager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_StreamingServerManager.ManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::StreamingServerManager::Manager'
    _M_StreamingServerManager._t_ManagerPrx = IcePy.defineProxy('::StreamingServerManager::Manager', ManagerPrx)

    _M_StreamingServerManager.ManagerPrx = ManagerPrx
    del ManagerPrx

    _M_StreamingServerManager.Manager = Ice.createTempClass()
    class Manager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::StreamingServerManager::Manager')

        def ice_id(self, current=None):
            return '::StreamingServerManager::Manager'

        @staticmethod
        def ice_staticId():
            return '::StreamingServerManager::Manager'

        def search(self, key, value, current=None):
            raise NotImplementedError("servant method 'search' not implemented")

        def list(self, current=None):
            raise NotImplementedError("servant method 'list' not implemented")

        def play(self, track, current=None):
            raise NotImplementedError("servant method 'play' not implemented")

        def add(self, trackList, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def remove(self, trackList, current=None):
            raise NotImplementedError("servant method 'remove' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_StreamingServerManager._t_ManagerDisp)

        __repr__ = __str__

    _M_StreamingServerManager._t_ManagerDisp = IcePy.defineClass('::StreamingServerManager::Manager', Manager, (), None, ())
    Manager._ice_type = _M_StreamingServerManager._t_ManagerDisp

    Manager._op_search = IcePy.Operation('search', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_StreamingServerManager._t_trackSequence, False, 0), ())
    Manager._op_list = IcePy.Operation('list', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_StreamingServerManager._t_trackSequence, False, 0), ())
    Manager._op_play = IcePy.Operation('play', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_StreamingServerManager._t_Track, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Manager._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_StreamingServerManager._t_trackSequence, False, 0),), (), ((), _M_StreamingServerManager._t_Status, False, 0), ())
    Manager._op_remove = IcePy.Operation('remove', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_StreamingServerManager._t_trackSequence, False, 0),), (), ((), _M_StreamingServerManager._t_Status, False, 0), ())

    _M_StreamingServerManager.Manager = Manager
    del Manager

# End of module StreamingServerManager
