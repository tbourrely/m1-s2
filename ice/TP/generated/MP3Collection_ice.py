# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `MP3Collection.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module MP3Collection
_M_MP3Collection = Ice.openModule('MP3Collection')
__name__ = 'MP3Collection'

if 'Track' not in _M_MP3Collection.__dict__:
    _M_MP3Collection.Track = Ice.createTempClass()
    class Track(Ice.Value):
        def __init__(self, artist='', name='', year='', file=''):
            self.artist = artist
            self.name = name
            self.year = year
            self.file = file

        def ice_id(self):
            return '::MP3Collection::Track'

        @staticmethod
        def ice_staticId():
            return '::MP3Collection::Track'

        def __str__(self):
            return IcePy.stringify(self, _M_MP3Collection._t_Track)

        __repr__ = __str__

    _M_MP3Collection._t_Track = IcePy.defineValue('::MP3Collection::Track', Track, -1, (), False, False, None, (
        ('artist', (), IcePy._t_string, False, 0),
        ('name', (), IcePy._t_string, False, 0),
        ('year', (), IcePy._t_string, False, 0),
        ('file', (), IcePy._t_string, False, 0)
    ))
    Track._ice_type = _M_MP3Collection._t_Track

    _M_MP3Collection.Track = Track
    del Track

_M_MP3Collection._t_Collection = IcePy.defineValue('::MP3Collection::Collection', Ice.Value, -1, (), False, True, None, ())

if 'CollectionPrx' not in _M_MP3Collection.__dict__:
    _M_MP3Collection.CollectionPrx = Ice.createTempClass()
    class CollectionPrx(Ice.ObjectPrx):

        def search(self, key, value, context=None):
            return _M_MP3Collection.Collection._op_search.invoke(self, ((key, value), context))

        def searchAsync(self, key, value, context=None):
            return _M_MP3Collection.Collection._op_search.invokeAsync(self, ((key, value), context))

        def begin_search(self, key, value, _response=None, _ex=None, _sent=None, context=None):
            return _M_MP3Collection.Collection._op_search.begin(self, ((key, value), _response, _ex, _sent, context))

        def end_search(self, _r):
            return _M_MP3Collection.Collection._op_search.end(self, _r)

        def add(self, track, context=None):
            return _M_MP3Collection.Collection._op_add.invoke(self, ((track, ), context))

        def addAsync(self, track, context=None):
            return _M_MP3Collection.Collection._op_add.invokeAsync(self, ((track, ), context))

        def begin_add(self, track, _response=None, _ex=None, _sent=None, context=None):
            return _M_MP3Collection.Collection._op_add.begin(self, ((track, ), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_MP3Collection.Collection._op_add.end(self, _r)

        def remove(self, track, context=None):
            return _M_MP3Collection.Collection._op_remove.invoke(self, ((track, ), context))

        def removeAsync(self, track, context=None):
            return _M_MP3Collection.Collection._op_remove.invokeAsync(self, ((track, ), context))

        def begin_remove(self, track, _response=None, _ex=None, _sent=None, context=None):
            return _M_MP3Collection.Collection._op_remove.begin(self, ((track, ), _response, _ex, _sent, context))

        def end_remove(self, _r):
            return _M_MP3Collection.Collection._op_remove.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_MP3Collection.CollectionPrx.ice_checkedCast(proxy, '::MP3Collection::Collection', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_MP3Collection.CollectionPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::MP3Collection::Collection'
    _M_MP3Collection._t_CollectionPrx = IcePy.defineProxy('::MP3Collection::Collection', CollectionPrx)

    _M_MP3Collection.CollectionPrx = CollectionPrx
    del CollectionPrx

    _M_MP3Collection.Collection = Ice.createTempClass()
    class Collection(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MP3Collection::Collection')

        def ice_id(self, current=None):
            return '::MP3Collection::Collection'

        @staticmethod
        def ice_staticId():
            return '::MP3Collection::Collection'

        def search(self, key, value, current=None):
            raise NotImplementedError("servant method 'search' not implemented")

        def add(self, track, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def remove(self, track, current=None):
            raise NotImplementedError("servant method 'remove' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_MP3Collection._t_CollectionDisp)

        __repr__ = __str__

    _M_MP3Collection._t_CollectionDisp = IcePy.defineClass('::MP3Collection::Collection', Collection, (), None, ())
    Collection._ice_type = _M_MP3Collection._t_CollectionDisp

    Collection._op_search = IcePy.Operation('search', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_MP3Collection._t_Track, False, 0), ())
    Collection._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_MP3Collection._t_Track, False, 0),), (), None, ())
    Collection._op_remove = IcePy.Operation('remove', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_MP3Collection._t_Track, False, 0),), (), None, ())

    _M_MP3Collection.Collection = Collection
    del Collection

# End of module MP3Collection
